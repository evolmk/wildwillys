@import "initial-variables";

@mixin clearfix {
  &::after {
    clear: both;
    content: " ";
    display: table;
  }
}

@mixin center($width, $height: 0) {
  position: absolute;

  @if $height != 0 {
    left: calc(50% - (#{$width} / 2));
    top: calc(50% - (#{$height} / 2));
  }
  @else {
    left: calc(50% - (#{$width} / 2));
    top: calc(50% - (#{$width} / 2));
  }
}

@mixin fa($size, $dimensions) {
  display: inline-block;
  font-size: $size;
  height: $dimensions;
  line-height: $dimensions;
  text-align: center;
  vertical-align: top;
  width: $dimensions;
}

@mixin hamburger($dimensions) {
  cursor: pointer;
  display: block;
  height: $dimensions;
  position: relative;
  width: $dimensions;

  span {
    background-color: currentColor; //or #fff
    display: block;
    height: 1px;
    left: calc(50% - 8px);
    position: absolute;
    transform-origin: center;
    transition-duration: $speed;
    transition-property: background-color, opacity, transform;
    transition-timing-function: $easing;
    width: 16px;

    &:nth-child(1) {
      top: calc(50% - 6px);
    }

    &:nth-child(2) {
      top: calc(50% - 1px);
    }

    &:nth-child(3) {
      top: calc(50% + 4px);
    }
  }

  &:hover {
    background-color: rgba(black, 0.05);
  }

  // Modifers
  &.is-active {
    span {
      &:nth-child(1) {
        transform: translateY(5px) rotate(45deg);
      }

      &:nth-child(2) {
        opacity: 0;
      }

      &:nth-child(3) {
        transform: translateY(-5px) rotate(-45deg);
      }
    }
  }
}

@mixin overflow-touch {
  -webkit-overflow-scrolling: touch;
}

@mixin placeholder {
  $placeholders: ":-moz" ":-webkit-input" "-moz" "-ms-input";

  @each $placeholder in $placeholders {
    &:#{$placeholder}-placeholder {
      @content;
    }
  }
}

// Responsiveness

@mixin from($device) {
  @media screen and (min-width: $device) {
    @content;
  }
}

@mixin until($device) {
  @media screen and (max-width: $device - 1px) {
    @content;
  }
}

@mixin mobile {
  @media screen and (max-width: $tablet - 1px) {
    @content;
  }
}

@mixin tablet {
  @media screen and (min-width: $tablet), print {
    @content;
  }
}

@mixin tablet-only {
  @media screen and (min-width: $tablet) and (max-width: $desktop - 1px) {
    @content;
  }
}

@mixin touch {
  @media screen and (max-width: $desktop - 1px) {
    @content;
  }
}

@mixin desktop {
  @media screen and (min-width: $desktop) {
    @content;
  }
}

@mixin desktop-only {
  @if $widescreen-enabled {
    @media screen and (min-width: $desktop) and (max-width: $widescreen - 1px) {
      @content;
    }
  }
}

@mixin until-widescreen {
  @if $widescreen-enabled {
    @media screen and (max-width: $widescreen - 1px) {
      @content;
    }
  }
}

@mixin widescreen {
  @if $widescreen-enabled {
    @media screen and (min-width: $widescreen) {
      @content;
    }
  }
}

@mixin widescreen-only {
  @if $widescreen-enabled and $fullhd-enabled {
    @media screen and (min-width: $widescreen) and (max-width: $fullhd - 1px) {
      @content;
    }
  }
}

@mixin until-fullhd {
  @if $fullhd-enabled {
    @media screen and (max-width: $fullhd - 1px) {
      @content;
    }
  }
}

@mixin fullhd {
  @if $fullhd-enabled {
    @media screen and (min-width: $fullhd) {
      @content;
    }
  }
}

// Placeholders

@mixin unselectable {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

%unselectable {
  @include unselectable;
}

//@mixin arrow($color: transparent) {
//  border: 1px solid $color;
//  border-right: 0;
//  border-top: 0;
//  content: " ";
//  display: block;
//  height: 0.5em;
//  pointer-events: none;
//  position: absolute;
//  transform: rotate(-45deg);
//  transform-origin: center;
//  width: 0.5em;
//}

@mixin arrow($color: transparent) {
  border: 1px solid $color;
  //border-radius: 2px;
  border-right: 0;
  border-top: 0;
  content: " ";
  display: block;
  height: 0.5em;
  //margin-top: -0.4375em;
  pointer-events: none;
  position: absolute;
  top: 50%;
  transform: rotate(-45deg);
  transform-origin: center;
  width: 0.5em;
}


%arrow {
  @include arrow;
}

@mixin block {
  &:not(:last-child) {
    margin-bottom: 1.5rem;
  }
}

%block {
  @include block;
}

@mixin delete {
  @extend %unselectable;

  -moz-appearance: none;
  -webkit-appearance: none;
  background-color: rgba($black, 0.2);
  border: none;
  border-radius: $radius-rounded;
  cursor: pointer;
  pointer-events: auto;
  display: inline-block;
  flex-grow: 0;
  flex-shrink: 0;
  font-size: 0;
  height: 20px;
  max-height: 20px;
  max-width: 20px;
  min-height: 20px;
  min-width: 20px;
  outline: none;
  position: relative;
  vertical-align: top;
  width: 20px;

  &::before,
  &::after {
    background-color: $white;
    content: "";
    display: block;
    left: 50%;
    position: absolute;
    top: 50%;
    transform: translateX(-50%) translateY(-50%) rotate(45deg);
    transform-origin: center center;
  }

  &::before {
    height: 2px;
    width: 50%;
  }

  &::after {
    height: 50%;
    width: 2px;
  }

  &:hover,
  &:focus {
    background-color: rgba($black, 0.3);
  }

  &:active {
    background-color: rgba($black, 0.4);
  }

  // Sizes
  &.is-small {
    height: 16px;
    max-height: 16px;
    max-width: 16px;
    min-height: 16px;
    min-width: 16px;
    width: 16px;
  }

  &.is-medium {
    height: 24px;
    max-height: 24px;
    max-width: 24px;
    min-height: 24px;
    min-width: 24px;
    width: 24px;
  }

  &.is-large {
    height: 32px;
    max-height: 32px;
    max-width: 32px;
    min-height: 32px;
    min-width: 32px;
    width: 32px;
  }
}

%delete {
  @include delete;
}

@mixin loader {
  animation: spinAround 500ms infinite linear;
  border: 2px solid $grey-lighter;
  border-radius: $radius-rounded;
  border-right-color: transparent;
  border-top-color: transparent;
  content: "";
  display: block;
  height: 1em;
  position: relative;
  width: 1em;
}

%loader {
  @include loader;
}

@mixin overlay($offset: 0) {
  bottom: $offset;
  left: $offset;
  position: absolute;
  right: $offset;
  top: $offset;
}

%overlay {
  @include overlay;
}


/////////////////////////////////////
// Custom Mixins
/////////////////////////////////////

// Border Radius
/*ex: .klass { @include border-radius(10px); } */
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

// Vertical Align
/*ex: .klass { @include vertical-align(); } */
@mixin vertical-align($position: absolute) {
  position: $position;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

// Vertical & Horizontal Align
/*ex: .klass { @include center-align(); } */
@mixin center-align($position: absolute) {
  position: $position;
  margin: auto;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

// Truncate Text
/*ex: .klass { @include truncate(250px); } */
@mixin truncate($width: 100%, $display: inline-block) {
  display: $display;
  width: $width;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

// Transitions
// Usage:   @include transition(width 0.2s, height 0.3s ease-in-out);
// Output:  -webkit-transition(width 0.2s, height 0.3s ease-in-out);
//          transition(width 0.2s, height 0.3s ease-in-out);
@mixin transition($transitions...) {
  $unfoldedTransitions: ();
  @each $transition in $transitions {
    $unfoldedTransitions: append($unfoldedTransitions, unfoldTransition($transition), comma);
  }

  -webkit-transition: $unfoldedTransitions;
  transition: $unfoldedTransitions;
}
@function unfoldTransition ($transition) {
  // Default values
  $property: all;
  $duration: .2s;
  $easing: null; // Browser default is ease, which is what we want
  $delay: null; // Browser default is 0, which is what we want
  $defaultProperties: ($property, $duration, $easing, $delay);

  // Grab transition properties if they exist
  $unfoldedTransition: ();
  @for $i from 1 through length($defaultProperties) {
    $p: null;
    @if $i <= length($transition) {
      $p: nth($transition, $i)
    } @else {
      $p: nth($defaultProperties, $i)
    }
    $unfoldedTransition: append($unfoldedTransition, $p);
  }

  @return $unfoldedTransition;
}


// Elements
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Img Retina
//@include image-2x("logo2x.png", 100px, 25px);
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}
// Img Utils
@mixin background-cover() {
  -webkit-background-size: cover;
  -moz-background-size: cover;
  background-size: cover;
  -o-background-size: cover;
}

// Box Sizing (content-box || border-box)
@mixin box-sizing($type: content-box) {
  -webkit-box-sizing: $type;
  -moz-box-sizing: $type;
  box-sizing: $type;
}

//Opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin scale($ratio) {
  -webkit-transform: scale($ratio);
  -ms-transform: scale($ratio); // IE9 only
  -o-transform: scale($ratio);
  transform: scale($ratio);
}

//Transform
@mixin transform($transforms) {
  -webkit-transform: $transforms;
  -moz-transform: $transforms;
  -ms-transform: $transforms;
  transform: $transforms;
}

////Clearfix
//@mixin clearfix() {
//  &:before,
//  &:after {
//    content: "";
//    display: table;
//  }
//  &:after {
//    clear: both;
//  }
//}

//Buttons
@mixin button-generator($font, $font-hover, $background, $background-hover) {
  color: $font;
  background-color: $background;
  //border: none;
  border-color: $background;
  //@include transition();
  &:visited {
    color: $font;
  }
  &:hover,
    //&:focus,
    //&.focus,
  &:active,
  &.active,
  .open > .dropdown-toggle {
    color: $font-hover;
    background-color: $background-hover;
    border-color: $background-hover;
  }
  &:active,
  &.active,
  .open > .dropdown-toggle {
    background-image: none;
  }
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &,
    &:hover,
    &:focus,
    &.focus,
    &:active,
    &.active {
      opacity: 0.5;
    }
  }
  .badge {
    color: $background;
    background-color: $font;
  }
}

@mixin button-generator-outline($font, $font-hover, $border-color, $border-color-hover, $border-width) {
  color: #333;
  background-color: transparent;
  border: $border-width solid $border-color;
  //@include transition();
  &:visited {
    color: $font;
  }
  &:hover,
  &:focus,
  &.focus,
  &:active,
  &.active,
  .open > .dropdown-toggle {
    color: $font-hover;
    background-color: transparent;
    border-color: $border-color-hover;
  }
  &:active,
  &.active,
  .open > .dropdown-toggle {
    background-image: none;
  }
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &,
    &:hover,
    &:focus,
    &.focus,
    &:active,
    &.active {
      opacity: 0.5;
    }
  }
  .badge {
    color: $font;
    background-color: $border-color;
  }
}

@mixin button-generator-size($padding-vertical, $padding-horizontal, $font-size, $line-height) {
  padding: $padding-vertical $padding-horizontal;
  font-size: $font-size;
  line-height: $line-height;
}

@mixin btn-round($value: 200px) {
  border-radius: $value;
}

@mixin stretch-width {
  max-width: 100%;
  max-height: 100%;
  height: auto;
}

@mixin stretch-height {
  max-height: 100%;
  max-width: 100%;
  width: auto;
}


/////////////////////////////////////
// Margin & Padding Shortcuts
/////////////////////////////////////

$spaceAmounts: (0, 1, 2, 3, 4, 5, 6, 8, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 150, 200, 250);

//margin-top & margin-bottom: m-5
//margin-top:  mt-5
//margin-right:  mr-5
//margin-bottom:  mb-5
//margin-left:  ml-5
//negative margin-top:  mt-5
//negative margin-right:  mr-5
//negative margin-bottom:  mb-5
//negative margin-left:  ml-5

//padding-top & padding-bottom: p-5
//padding-top:  pt-5
//padding-right:  pr-5
//padding-bottom:  pb-5
//padding-left:  pl-5
@mixin generate-spaceShortcuts() {
  @each $space in $spaceAmounts {
    .m-#{$space} {
      margin-top: #{$space}px !important;
      margin-bottom: #{$space}px !important;
    }
    .mt-#{$space} {
      margin-top: #{$space}px !important;
    }
    .mr-#{$space} {
      margin-right: #{$space}px !important;
    }
    .mb-#{$space} {
      margin-bottom: #{$space}px !important;
    }
    .ml-#{$space} {
      margin-left: #{$space}px !important;
    }
    .neg-mt-#{$space} {
      margin-top: -#{$space}px !important;
    }
    .neg-mr-#{$space} {
      margin-right: -#{$space}px !important;
    }
    .neg-mb-#{$space} {
      margin-bottom: -#{$space}px !important;
    }
    .neg-ml-#{$space} {
      margin-left: -#{$space}px !important;
    }
    .p-#{$space} {
      padding-top: #{$space}px !important;
      padding-bottom: #{$space}px !important;
    }
    .pt-#{$space} {
      padding-top: #{$space}px !important;
    }
    .pr-#{$space} {
      padding-right: #{$space}px !important;
    }
    .pb-#{$space} {
      padding-bottom: #{$space}px !important;
    }
    .pl-#{$space} {
      padding-left: #{$space}px !important;
    }
    .padding-#{$space} {
      padding: #{$space}px !important;
    }
  }
}
.ml-auto { margin-left: auto; }
.mr-auto { margin-right: auto; }
@include generate-spaceShortcuts();


// Alerts

@mixin alert-variant($background, $border, $text-color) {
  background-color: $background;
  border-color: $border;
  color: $text-color;

  hr {
    border-top-color: darken($border, 5%);
  }
  .alert-link {
    color: darken($text-color, 10%);
  }
}


///////////////////////////
// Custom (need to consolidate these)
///////////////////////////

@mixin rounded($radius: 2px){
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}

@mixin box-shadow($arguments){
  -webkit-box-shadow: $arguments;
  -moz-box-shadow: $arguments;
  box-shadow: $arguments;
}

@mixin transform($arguments...){
  -webkit-transform: $arguments;
  -moz-transform: $arguments;
  -o-transform: $arguments;
  -ms-transform: $arguments;
  transform: $arguments;
}

@mixin rotate($deg:5deg){
  @include transform(rotate($deg));
}

@mixin translate($x:0, $y:0){
  @include transform(translate($x, $y));
}

@mixin translate3d($x:0, $y:0, $z:0){
  @include transform(translate3d($x, $y, $z));
}

@mixin scale($x:0, $y:0){
  @include transform(scale($x, $y));
}

@mixin scale3d($x:0, $y:0, $z:0){
  @include transform(scale3d($x, $y, $z));
}

@mixin transition($value...){
  -webkit-transition: $value;
  -moz-transition: $value;
  -o-transition: $value;
  transition: $value;
}

@mixin animation-duration($duration){
  -webkit-animation-duration: $duration;
  -moz-animation-duration: $duration;
  -o-animation-duration: $duration;
  animation-duration: $duration;
}

@mixin animation-timing-function($timing){
  -webkit-animation-timing-function: $timing;
  -moz-animation-timing-function: $timing;
  -o-animation-timing-function: $timing;
  animation-timing-function: $timing;
}

@mixin animation-fill-mode($mode){
  -webkit-animation-fill-mode: $mode;
  -moz-animation-fill-mode: $mode;
  -o-animation-fill-mode: $mode;
  animation-fill-mode: $mode;
}

@mixin animation-name($name){
  -webkit-animation-name: $name;
  -moz-animation-name: $name;
  -o-animation-name: $name;
  animation-name: $name;
}

@mixin transition-delay($delay){
  -webkit-transition-delay: $delay;
  -moz-transition-delay: $delay;
  -o-transition-delay: $delay;
  transition-delay: $delay;
}

@mixin transition-duration($duration: 0.2s){
  -moz-transition-duration: $duration;
  -webkit-transition-duration: $duration;
  -o-transition-duration: $duration;
  transition-duration: $duration;
}

@mixin transform-origin($origin){
  -webkit-transform-origin: $origin;
  -moz-transform-origin: $origin;
  -o-transform-origin: $origin;
  -ms-transform-origin: $origin;
  transform-origin: $origin;
}

@mixin user-select($argument: none){
  -webkit-user-select: $argument;
  -moz-user-select: $argument;
  -ms-user-select: $argument;
  user-select: $argument;
}

@mixin opacity($opacity: 0.5){
  -moz-opacity: $opacity;
  -khtml-opacity: $opacity;
  -webkit-opacity: $opacity;
  opacity: $opacity;
  $opperc: $opacity * 100;
  -ms-filter: #{"progid:DXImageTransform.Microsoft.Alpha(opacity=${opperc})"};
  filter: #{"alpha(opacity=${opperc})"};
}